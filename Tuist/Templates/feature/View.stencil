import SwiftUI
import ComposableArchitecture
import {{ name }}Interface
import Inject

public struct {{ name }}View: View {
    @ObserveInjection var inject
    @Bindable var store: StoreOf<{{ name }}Feature>

    public init(store: StoreOf<{{ name }}Feature>) {
        self.store = store
    }

    public var body: some View {
        NavigationStack {
            List {
                ForEach(store.items) { item in
                    {{ name }}ItemView(item: item)
                        .onTapGesture { store.send(.itemTapped(item.id)) }
                }
                .onDelete { store.send(.deleteItem($0)) }
                .onMove { store.send(.moveItem(from: $0, to: $1)) }
            }
            .navigationTitle("{{ name }}")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Add") { store.send(.addButtonTapped) }
                }
                ToolbarItem(placement: .navigationBarLeading) {
                    EditButton()
                }
            }
            .overlay {
                if store.isLoading {
                    ProgressView()
                }
            }
        }
        .sheet(
            item: $store.scope(state: \.destination?.add, action: \.destination.add)
        ) { addStore in
            NavigationStack {
                {{ name }}AddItemView(store: addStore)
            }
        }
        .sheet(
            item: $store.scope(state: \.destination?.edit, action: \.destination.edit)
        ) { editStore in
            NavigationStack {
                {{ name }}EditItemView(store: editStore)
            }
        }
        .alert($store.scope(state: \.destination?.alert, action: \.destination.alert))
        .onAppear { store.send(.onAppear) }
        .enableInjection()
    }
}

public struct {{ name }}AddItemView: View {
    @ObserveInjection var inject
    @Bindable var store: StoreOf<{{ name }}AddItemFeature>

    public init(store: StoreOf<{{ name }}AddItemFeature>) {
        self.store = store
    }

    public var body: some View {
        Form {
            TextField("Title", text: $store.item.title)
            TextField("Description", text: $store.item.description)
        }
        .navigationTitle("Add Item")
        .toolbar {
            ToolbarItem(placement: .cancellationAction) {
                Button("Cancel") { store.send(.cancelButtonTapped) }
            }
            ToolbarItem(placement: .confirmationAction) {
                Button("Save") { store.send(.saveButtonTapped(store.item)) }
            }
        }
        .enableInjection()
    }
}

public struct {{ name }}EditItemView: View {
    @ObserveInjection var inject
    @Bindable var store: StoreOf<{{ name }}EditItemFeature>

    public init(store: StoreOf<{{ name }}EditItemFeature>) {
        self.store = store
    }

    public var body: some View {
        Form {
            TextField("Title", text: $store.item.title)
            TextField("Description", text: $store.item.description)
        }
        .navigationTitle("Edit Item")
        .toolbar {
            ToolbarItem(placement: .cancellationAction) {
                Button("Cancel") { store.send(.cancelButtonTapped) }
            }
            ToolbarItem(placement: .confirmationAction) {
                Button("Save") { store.send(.saveButtonTapped(store.item)) }
            }
        }
        .enableInjection()
    }
}
