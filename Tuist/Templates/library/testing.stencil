import Foundation
import {{ name }}Interface
import Dependencies

public extension {{ name }}Client {
  static func mock(
    startTask: @escaping @Sendable (TaskInput) async -> AsyncStream<TaskEvent> = { _ in .finished },
    pauseTask: @escaping @Sendable (TaskID) async throws -> Void = { _ in },
    resumeTask: @escaping @Sendable (TaskID) async throws -> Void = { _ in },
    cancelTask: @escaping @Sendable (TaskID) async throws -> Void = { _ in },
    observeTaskProgress: @escaping @Sendable (TaskID) -> AsyncStream<TaskProgress> = { _ in .finished },
    observeTaskState: @escaping @Sendable (TaskID) -> AsyncStream<TaskState> = { _ in .finished }
  ) -> Self {
    Self(
      startTask: startTask,
      pauseTask: pauseTask,
      resumeTask: resumeTask,
      cancelTask: cancelTask,
      observeTaskProgress: observeTaskProgress,
      observeTaskState: observeTaskState
    )
  }
}

public extension TaskProgress {
  static func mock(
    completedUnits: Int = 50,
    totalUnits: Int = 100,
    currentPhase: TaskPhase = .processing(stage: 1, totalStages: 1),
    estimatedTimeRemaining: TimeInterval? = 10
  ) -> Self {
    Self(
      completedUnits: completedUnits,
      totalUnits: totalUnits,
      currentPhase: currentPhase,
      estimatedTimeRemaining: estimatedTimeRemaining
    )
  }
}

public extension TaskResult {
  static func mock(
    processedUnits: Int = 100,
    duration: TimeInterval = 5.0,
    metadata: [String: String] = [:]
  ) -> Self {
    Self(
      processedUnits: processedUnits,
      duration: duration,
      metadata: metadata
    )
  }
}
