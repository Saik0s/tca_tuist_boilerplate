//
// Live{{ name }}Client.swift
//

import ComposableArchitecture
import Foundation
import {{ name }}Interface

// MARK: - {{ name }}Client + DependencyKey

extension {{ name }}Client: @retroactive DependencyKey {
  public static let liveValue = Self(
    fetchItems: {
      try await Task.sleep(for: .seconds(1))
      return [
        {{ name }}Item(
          id: UUID(),
          title: "Important Task",
          description: "Must be completed ASAP",
          createdAt: Date()
        ),
        {{ name }}Item(
          id: UUID(),
          title: "Secondary Task",
          description: "Can wait until next week",
          createdAt: Date()
        ),
      ]
    },
    saveItems: { _ in
      try await Task.sleep(for: .seconds(1))
      // In a real implementation, this would persist the items
    }
  )
}

public extension DependencyValues {
  var {{ name | lowerFirstWord }}Client: {{ name }}Client {
    get { self[{{ name }}Client.self] }
    set { self[{{ name }}Client.self] = newValue }
  }
}
