import Foundation

public struct TaskInput: Equatable {
  public let id: String
  public let parameters: [String: Any]
  
  public init(id: String, parameters: [String: Any] = [:]) {
    self.id = id
    self.parameters = parameters
  }
}

@CasePathable
public enum TaskEvent: Equatable {
  case started
  case progress(Double)
  case completed(TaskResult)
  case failed(TaskError)
  
  public static func == (lhs: TaskEvent, rhs: TaskEvent) -> Bool {
    switch (lhs, rhs) {
    case (.started, .started): return true
    case let (.progress(l), .progress(r)): return l == r
    case let (.completed(l), .completed(r)): return l == r
    case let (.failed(l), .failed(r)): return l == r
    default: return false
    }
  }
}

public struct TaskResult: Equatable {
  public let output: String
  public let duration: TimeInterval
  
  public init(output: String, duration: TimeInterval) {
    self.output = output
    self.duration = duration
  }
}

public enum TaskError: Error, Equatable {
  case cancelled
  case failed(String)
}
