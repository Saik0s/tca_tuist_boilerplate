import Foundation
import Dependencies

extension {{ name }}Client: DependencyKey {
  public static let liveValue = Self(
    startTask: { input in
      AsyncStream { continuation in
        Task {
          continuation.yield(.started)
          
          var progress: Double = 0
          while progress < 1.0 {
            try await Task.sleep(for: .milliseconds(500))
            progress += 0.1
            continuation.yield(.progress(progress))
          }
          
          continuation.yield(.completed(TaskResult(
            output: "Task \(input.id) completed",
            duration: 5.0
          )))
          continuation.finish()
        }
      }
    },
    pauseTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    resumeTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    cancelTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    observeTaskProgress: { _ in
      AsyncStream { continuation in
        continuation.finish()
      }
    },
    observeTaskState: { _ in
      AsyncStream { continuation in
        continuation.finish()
      }
    }
  )
}

public extension DependencyValues {
  var {{ name | lowerFirstWord }}Client: {{ name }}Client {
    get { self[{{ name }}Client.self] }
    set { self[{{ name }}Client.self] = newValue }
  }
}
