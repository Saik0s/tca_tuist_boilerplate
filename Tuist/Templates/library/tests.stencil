import XCTest
import ComposableArchitecture
@testable import {{ name }}

final class {{ name }}Tests: XCTestCase {
  @MainActor
  func testBasicTaskFlow() async {
    let taskId = "test-task-1"
    let input = TaskInput(id: taskId)
    var receivedEvents: [TaskEvent] = []
    
    let client = {{ name }}Client.testValue
    
    let stream = client.startTask(input)
    for await event in stream {
      receivedEvents.append(event)
    }
    
    XCTAssertEqual(receivedEvents.count, 12) // started + 10 progress updates + completed
    XCTAssertEqual(receivedEvents.first, .started)
    XCTAssertEqual(receivedEvents.last, .completed(TaskResult(
      output: "Task \(taskId) completed",
      duration: 5.0
    )))
  }
  
  @MainActor
  func testTaskCancellation() async throws {
    let taskId = "test-task-1"
    let client = {{ name }}Client.testValue
    
    do {
      try await client.cancelTask(taskId)
    } catch {
      XCTFail("Cancellation should not throw: \(error)")
    }
  }
  
  @MainActor 
  func testTaskPauseResume() async throws {
    let taskId = "test-task-1"
    let client = {{ name }}Client.testValue
    
    do {
      try await client.pauseTask(taskId)
      try await client.resumeTask(taskId)
    } catch {
      XCTFail("Pause/Resume should not throw: \(error)")
    }
  }
  
  @MainActor
  func testProgressObservation() async {
    let taskId = "test-task-1"
    let client = {{ name }}Client.testValue
    var progressValues: [Double] = []
    
    let stream = client.observeTaskProgress(taskId)
    for await progress in stream {
      progressValues.append(progress)
      if progress >= 1.0 { break }
    }
    
    XCTAssertGreaterThan(progressValues.count, 0)
    XCTAssertEqual(progressValues.last, 1.0, accuracy: 0.001)
  }
}
