import Foundation
import Dependencies

extension {{ name }}Client: DependencyKey {
  public static let liveValue = Self(
    startTask: { input in
      AsyncStream { continuation in
        Task {
          // Simulate task startup
          continuation.yield(.started)
          
          var progress: Double = 0
          while progress < 1.0 {
            try await Task.sleep(for: .milliseconds(500))
            progress += 0.1
            continuation.yield(.progress(TaskProgress(
              completedUnits: Int(progress * 100),
              totalUnits: 100,
              currentPhase: .processing(stage: 1, totalStages: 1),
              estimatedTimeRemaining: 1.0
            )))
          }
          
          continuation.yield(.completed(TaskResult(
            processedUnits: 100,
            duration: 5.0,
            metadata: [:]
          )))
          continuation.finish()
        }
      }
    },
    pauseTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    resumeTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    cancelTask: { _ in
      try await Task.sleep(for: .milliseconds(100))
    },
    observeTaskProgress: { _ in
      AsyncStream { continuation in
        continuation.finish()
      }
    },
    observeTaskState: { _ in
      AsyncStream { continuation in
        continuation.finish()
      }
    }
  )
}
